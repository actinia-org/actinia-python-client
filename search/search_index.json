{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"actinia-python-client Fork Me On GitHub Access actinia - The GRASS GIS REST API via Python. actinia-python-client is a Python library to access an actinia server easily via python. Installation Quickstart Location Management Mapset Management Raster, Vector, STRDS Management Process Chain Validation Processing","title":"actinia-python-client"},{"location":"#actinia-python-client","text":"Fork Me On GitHub Access actinia - The GRASS GIS REST API via Python. actinia-python-client is a Python library to access an actinia server easily via python. Installation Quickstart Location Management Mapset Management Raster, Vector, STRDS Management Process Chain Validation Processing","title":"actinia-python-client"},{"location":"02_installation/","text":"Installation You can install the actinia Python library via: pip3 install actinia-python-client For newest version see releases .","title":"Installation"},{"location":"02_installation/#installation","text":"You can install the actinia Python library via: pip3 install actinia-python-client For newest version see releases .","title":"Installation"},{"location":"03_quickstart/","text":"Quickstart Connecting actinia Python library with actinia from actinia import Actinia actinia_mundialis = Actinia() actinia_mundialis.get_version() or connect to actinia-dev with version 3: from actinia import Actinia actinia_dev_mundialis = Actinia(\"https://actinia-dev.mundialis.de/\", \"v3\") actinia_dev_mundialis.get_version() Set authentication to get access to the actinia functionallity actinia_mundialis.set_authentication(\"demouser\", \"gu3st!pa55w0rd\")","title":"Quickstart"},{"location":"03_quickstart/#quickstart","text":"Connecting actinia Python library with actinia from actinia import Actinia actinia_mundialis = Actinia() actinia_mundialis.get_version() or connect to actinia-dev with version 3: from actinia import Actinia actinia_dev_mundialis = Actinia(\"https://actinia-dev.mundialis.de/\", \"v3\") actinia_dev_mundialis.get_version() Set authentication to get access to the actinia functionallity actinia_mundialis.set_authentication(\"demouser\", \"gu3st!pa55w0rd\")","title":"Quickstart"},{"location":"04_location_management/","text":"Location Management With the location management the locations can be requested as well as information of each location. Also a location can be created and deleted if the user is permitted. First connecting actinia Python library with actinia and set authentication (Attention: The demouser is not permitted to create or delete a location!) from actinia import Actinia actinia_mundialis = Actinia() actinia_mundialis.get_version() actinia_mundialis.set_authentication(\"demouser\", \"gu3st!pa55w0rd\") Get locations and locaton information of a special location: locations = actinia_mundialis.get_locations() print(locations.keys()) locations[\"nc_spm_08\"].get_info() # or actinia_mundialis.locations[\"nc_spm_08\"].get_info() Create a new location new_location = actinia_mundialis.create_location(\"test_location\", 25832) print(new_location.name) print(new_location.region) print([loc for loc in actinia_mundialis.locations]) Delete a location actinia_mundialis.locations[\"test_location\"].delete() print([loc for loc in actinia_mundialis.locations()])","title":"Location Management"},{"location":"04_location_management/#location-management","text":"With the location management the locations can be requested as well as information of each location. Also a location can be created and deleted if the user is permitted. First connecting actinia Python library with actinia and set authentication (Attention: The demouser is not permitted to create or delete a location!) from actinia import Actinia actinia_mundialis = Actinia() actinia_mundialis.get_version() actinia_mundialis.set_authentication(\"demouser\", \"gu3st!pa55w0rd\")","title":"Location Management"},{"location":"04_location_management/#get-locations-and-locaton-information-of-a-special-location","text":"locations = actinia_mundialis.get_locations() print(locations.keys()) locations[\"nc_spm_08\"].get_info() # or actinia_mundialis.locations[\"nc_spm_08\"].get_info()","title":"Get locations and locaton information of a special location:"},{"location":"04_location_management/#create-a-new-location","text":"new_location = actinia_mundialis.create_location(\"test_location\", 25832) print(new_location.name) print(new_location.region) print([loc for loc in actinia_mundialis.locations])","title":"Create a new location"},{"location":"04_location_management/#delete-a-location","text":"actinia_mundialis.locations[\"test_location\"].delete() print([loc for loc in actinia_mundialis.locations()])","title":"Delete a location"},{"location":"05_mapset_managment/","text":"Mapset Management With the mapset management the mapsets of a specified location can be requested as well as information of each mapset. Also a mapsest can be created and deleted if the user is permitted. First connecting actinia Python library with actinia and set authentication (Attention: The demouser is not permitted to create or delete a mapset!) from actinia import Actinia actinia_mundialis = Actinia() actinia_mundialis.get_version() actinia_mundialis.set_authentication(\"demouser\", \"gu3st!pa55w0rd\") # request all locations locations = actinia_mundialis.get_locations() Get Mapsets of Specified Location Get mapsets of the nc_spm_08 location: mapsets = actinia_mundialis.locations[\"nc_spm_08\"].get_mapsets() print(mapsets.keys()) Create and delete Mapset in Specified Location Create test_mapset in nc_spm_08 location: mapset_name = \"test_mapset\" locations[\"nc_spm_08\"].create_mapset(mapset_name) print(mapsets.keys()) Delete test_mapset mapset: locations[\"nc_spm_08\"].delete_mapset(mapset_name) print(mapsets.keys())","title":"Mapset Management"},{"location":"05_mapset_managment/#mapset-management","text":"With the mapset management the mapsets of a specified location can be requested as well as information of each mapset. Also a mapsest can be created and deleted if the user is permitted. First connecting actinia Python library with actinia and set authentication (Attention: The demouser is not permitted to create or delete a mapset!) from actinia import Actinia actinia_mundialis = Actinia() actinia_mundialis.get_version() actinia_mundialis.set_authentication(\"demouser\", \"gu3st!pa55w0rd\") # request all locations locations = actinia_mundialis.get_locations()","title":"Mapset Management"},{"location":"05_mapset_managment/#get-mapsets-of-specified-location","text":"Get mapsets of the nc_spm_08 location: mapsets = actinia_mundialis.locations[\"nc_spm_08\"].get_mapsets() print(mapsets.keys())","title":"Get Mapsets of Specified Location"},{"location":"05_mapset_managment/#create-and-delete-mapset-in-specified-location","text":"Create test_mapset in nc_spm_08 location: mapset_name = \"test_mapset\" locations[\"nc_spm_08\"].create_mapset(mapset_name) print(mapsets.keys()) Delete test_mapset mapset: locations[\"nc_spm_08\"].delete_mapset(mapset_name) print(mapsets.keys())","title":"Create and delete Mapset in Specified Location"},{"location":"06_raster_vector_strds_managment/","text":"Raster, Vector and STRDS Management from actinia import Actinia actinia_mundialis = Actinia() actinia_mundialis.get_version() actinia_mundialis.set_authentication(\"demouser\", \"gu3st!pa55w0rd\") # request all locations locations = actinia_mundialis.get_locations() # Get Mapsets of nc_spm_08 location mapsets = actinia_mundialis.locations[\"nc_spm_08\"].get_mapsets() Raster manangement Get all rasters of the PERMANENT mapsets rasters = mapsets[\"PERMANENT\"].get_raster_layers() print(rasters.keys()) Get information of the raster zipcodes info = rasters[\"zipcodes\"].get_info() Upload a GTif as raster layer to a user mapset (here the user mapset will be created before) mapset_name = \"test_mapset\" # mapset creation locations[\"nc_spm_08\"].create_mapset(mapset_name) # upload tif raster_layer_name = \"test\" file = \"/home/testuser/data/elevation.tif\" locations[\"nc_spm_08\"].mapsets[mapset_name].upload_raster(raster_layer_name, file) print(locations[\"nc_spm_08\"].mapsets[mapset_name].raster_layers.keys()) Delete a raster layer locations[\"nc_spm_08\"].mapsets[mapset_name].delete_raster(raster_layer_name) print(locations[\"nc_spm_08\"].mapsets[mapset_name].raster_layers.keys()) # delete mapset locations[\"nc_spm_08\"].delete_mapset(mapset_name) Vector management Get all vector maps of the PERMANENT mapsets vectors = mapsets[\"PERMANENT\"].get_vector_layers() print(vectors.keys()) Get information of the vector boundary_county info = vectors[\"boundary_county\"].get_info() Upload a GeoJSON as vector layer to a user mapset (here the user mapset will be created before) mapset_name = \"test_mapset\" # mapset creation locations[\"nc_spm_08\"].create_mapset(mapset_name) # upload tif vector_layer_name = \"test\" file = \"/home/testuser/data/firestations.geojson\" locations[\"nc_spm_08\"].mapsets[mapset_name].upload_vector(vector_layer_name, file) print(locations[\"nc_spm_08\"].mapsets[mapset_name].vector_layers.keys()) Delete a raster layer locations[\"nc_spm_08\"].mapsets[mapset_name].delete_vector(vector_layer_name) print(locations[\"nc_spm_08\"].mapsets[mapset_name].vector_layers.keys()) # delete mapset locations[\"nc_spm_08\"].delete_mapset(mapset_name)","title":"Raster, Vector and STRDS Management"},{"location":"06_raster_vector_strds_managment/#raster-vector-and-strds-management","text":"from actinia import Actinia actinia_mundialis = Actinia() actinia_mundialis.get_version() actinia_mundialis.set_authentication(\"demouser\", \"gu3st!pa55w0rd\") # request all locations locations = actinia_mundialis.get_locations() # Get Mapsets of nc_spm_08 location mapsets = actinia_mundialis.locations[\"nc_spm_08\"].get_mapsets()","title":"Raster, Vector and STRDS Management"},{"location":"06_raster_vector_strds_managment/#raster-manangement","text":"Get all rasters of the PERMANENT mapsets rasters = mapsets[\"PERMANENT\"].get_raster_layers() print(rasters.keys()) Get information of the raster zipcodes info = rasters[\"zipcodes\"].get_info() Upload a GTif as raster layer to a user mapset (here the user mapset will be created before) mapset_name = \"test_mapset\" # mapset creation locations[\"nc_spm_08\"].create_mapset(mapset_name) # upload tif raster_layer_name = \"test\" file = \"/home/testuser/data/elevation.tif\" locations[\"nc_spm_08\"].mapsets[mapset_name].upload_raster(raster_layer_name, file) print(locations[\"nc_spm_08\"].mapsets[mapset_name].raster_layers.keys()) Delete a raster layer locations[\"nc_spm_08\"].mapsets[mapset_name].delete_raster(raster_layer_name) print(locations[\"nc_spm_08\"].mapsets[mapset_name].raster_layers.keys()) # delete mapset locations[\"nc_spm_08\"].delete_mapset(mapset_name)","title":"Raster manangement"},{"location":"06_raster_vector_strds_managment/#vector-management","text":"Get all vector maps of the PERMANENT mapsets vectors = mapsets[\"PERMANENT\"].get_vector_layers() print(vectors.keys()) Get information of the vector boundary_county info = vectors[\"boundary_county\"].get_info() Upload a GeoJSON as vector layer to a user mapset (here the user mapset will be created before) mapset_name = \"test_mapset\" # mapset creation locations[\"nc_spm_08\"].create_mapset(mapset_name) # upload tif vector_layer_name = \"test\" file = \"/home/testuser/data/firestations.geojson\" locations[\"nc_spm_08\"].mapsets[mapset_name].upload_vector(vector_layer_name, file) print(locations[\"nc_spm_08\"].mapsets[mapset_name].vector_layers.keys()) Delete a raster layer locations[\"nc_spm_08\"].mapsets[mapset_name].delete_vector(vector_layer_name) print(locations[\"nc_spm_08\"].mapsets[mapset_name].vector_layers.keys()) # delete mapset locations[\"nc_spm_08\"].delete_mapset(mapset_name)","title":"Vector management"},{"location":"07_process_chain_validation/","text":"Process Chain Validation A process chain can be validated before a job is started. First connecting actinia Python library with actinia and set authentication: from actinia import Actinia actinia_mundialis = Actinia() actinia_mundialis.get_version() actinia_mundialis.set_authentication(\"demouser\", \"gu3st!pa55w0rd\") # request all locations locations = actinia_mundialis.get_locations() Synchronous process chain validation pc = { \"list\": [ { \"id\": \"r_mapcalc\", \"module\": \"r.mapcalc\", \"inputs\": [ { \"param\": \"expression\", \"value\": \"elevation=42\" } ] } ], \"version\": \"1\" } pc = {\"list\": [{\"id\": \"r_mapcalc\",\"module\": \"r.mapcalc\",\"inputs\": [{\"param\": \"expression\",\"value\": \"elevation=42\"}]}],\"version\": \"1\"} actinia_mundialis.locations[\"nc_spm_08\"].validate_process_chain_sync(pc) Asynchronous process chain validation: pc = { \"list\": [ { \"id\": \"r_mapcalc\", \"module\": \"r.mapcalc\", \"inputs\": [ { \"param\": \"expression\", \"value\": \"elevation=42\" } ] } ], \"version\": \"1\" } pc = {\"list\": [{\"id\": \"r_mapcalc\",\"module\": \"r.mapcalc\",\"inputs\": [{\"param\": \"expression\",\"value\": \"elevation=42\"}]}],\"version\": \"1\"} val_job = actinia_mundialis.locations[\"nc_spm_08\"].validate_process_chain_async(pc) val_job.poll_until_finished() print(val_job.status) print(val_job.message)","title":"Process Chain Validation"},{"location":"07_process_chain_validation/#process-chain-validation","text":"A process chain can be validated before a job is started. First connecting actinia Python library with actinia and set authentication: from actinia import Actinia actinia_mundialis = Actinia() actinia_mundialis.get_version() actinia_mundialis.set_authentication(\"demouser\", \"gu3st!pa55w0rd\") # request all locations locations = actinia_mundialis.get_locations()","title":"Process Chain Validation"},{"location":"07_process_chain_validation/#synchronous-process-chain-validation","text":"pc = { \"list\": [ { \"id\": \"r_mapcalc\", \"module\": \"r.mapcalc\", \"inputs\": [ { \"param\": \"expression\", \"value\": \"elevation=42\" } ] } ], \"version\": \"1\" } pc = {\"list\": [{\"id\": \"r_mapcalc\",\"module\": \"r.mapcalc\",\"inputs\": [{\"param\": \"expression\",\"value\": \"elevation=42\"}]}],\"version\": \"1\"} actinia_mundialis.locations[\"nc_spm_08\"].validate_process_chain_sync(pc)","title":"Synchronous process chain validation"},{"location":"07_process_chain_validation/#asynchronous-process-chain-validation","text":"pc = { \"list\": [ { \"id\": \"r_mapcalc\", \"module\": \"r.mapcalc\", \"inputs\": [ { \"param\": \"expression\", \"value\": \"elevation=42\" } ] } ], \"version\": \"1\" } pc = {\"list\": [{\"id\": \"r_mapcalc\",\"module\": \"r.mapcalc\",\"inputs\": [{\"param\": \"expression\",\"value\": \"elevation=42\"}]}],\"version\": \"1\"} val_job = actinia_mundialis.locations[\"nc_spm_08\"].validate_process_chain_async(pc) val_job.poll_until_finished() print(val_job.status) print(val_job.message)","title":"Asynchronous process chain validation:"},{"location":"08_processing/","text":"Processing Start a processing job with a valid process chain. First connect actinia Python library with actinia and set authentication: from actinia import Actinia actinia_mundialis = Actinia() actinia_mundialis.get_version() actinia_mundialis.set_authentication(\"demouser\", \"gu3st!pa55w0rd\") # request all locations locations = actinia_mundialis.get_locations() Ephemeral Processing Start an ephemeral processing job pc = { \"list\": [ { \"id\": \"r_mapcalc\", \"module\": \"r.mapcalc\", \"inputs\": [ { \"param\": \"expression\", \"value\": \"baum=5\" } ] } ], \"version\": \"1\" } job = actinia_mundialis.locations[\"nc_spm_08\"].create_processing_export_job(pc, \"test\") job.poll_until_finished() print(job.status) print(job.message) Persistent Processing Start a persistent processing job pc = { \"list\": [ { \"id\": \"r_mapcalc\", \"module\": \"r.mapcalc\", \"inputs\": [ { \"param\": \"expression\", \"value\": \"baum=5\" } ] } ], \"version\": \"1\" } # create user mapset (persistent processing can only be done in a user mapset) mapset_name = \"test_mapset\" locations[\"nc_spm_08\"].create_mapset(mapset_name) # create job job = locations[\"nc_spm_08\"].mapsets[mapset_name].create_processing_job(pc, \"test\") job.poll_until_finished() print(job.status) print(job.message) # print rasters in \"test_mapset\" rasters = locations[\"nc_spm_08\"].mapsets[mapset_name].get_raster_layers() print(rasters.keys()) # delete user mapset locations[\"nc_spm_08\"].delete_mapset(mapset_name) print(locations[\"nc_spm_08\"].mapsets.keys())","title":"Processing"},{"location":"08_processing/#processing","text":"Start a processing job with a valid process chain. First connect actinia Python library with actinia and set authentication: from actinia import Actinia actinia_mundialis = Actinia() actinia_mundialis.get_version() actinia_mundialis.set_authentication(\"demouser\", \"gu3st!pa55w0rd\") # request all locations locations = actinia_mundialis.get_locations()","title":"Processing"},{"location":"08_processing/#ephemeral-processing","text":"Start an ephemeral processing job pc = { \"list\": [ { \"id\": \"r_mapcalc\", \"module\": \"r.mapcalc\", \"inputs\": [ { \"param\": \"expression\", \"value\": \"baum=5\" } ] } ], \"version\": \"1\" } job = actinia_mundialis.locations[\"nc_spm_08\"].create_processing_export_job(pc, \"test\") job.poll_until_finished() print(job.status) print(job.message)","title":"Ephemeral Processing"},{"location":"08_processing/#persistent-processing","text":"Start a persistent processing job pc = { \"list\": [ { \"id\": \"r_mapcalc\", \"module\": \"r.mapcalc\", \"inputs\": [ { \"param\": \"expression\", \"value\": \"baum=5\" } ] } ], \"version\": \"1\" } # create user mapset (persistent processing can only be done in a user mapset) mapset_name = \"test_mapset\" locations[\"nc_spm_08\"].create_mapset(mapset_name) # create job job = locations[\"nc_spm_08\"].mapsets[mapset_name].create_processing_job(pc, \"test\") job.poll_until_finished() print(job.status) print(job.message) # print rasters in \"test_mapset\" rasters = locations[\"nc_spm_08\"].mapsets[mapset_name].get_raster_layers() print(rasters.keys()) # delete user mapset locations[\"nc_spm_08\"].delete_mapset(mapset_name) print(locations[\"nc_spm_08\"].mapsets.keys())","title":"Persistent Processing"}]}